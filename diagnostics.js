/**
 * –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
 * - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
 * - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

const http = require('http');
const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const fetch = require('node-fetch');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const LOCAL_API_URL = 'http://localhost:3000/api';
const PRODUCTION_API_URL = 'https://ra.nov.ru/api';
const SERVER_PROJECT_PATH = '../flower-shop-server';
const CLIENT_PROJECT_PATH = './';
const DOCKER_COMPOSE_PATH = './docker-compose.yml';

// ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m'
};

/**
 * –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
function printHeader() {
  console.log(`${colors.bold}${colors.cyan}==========================================${colors.reset}`);
  console.log(`${colors.bold}${colors.cyan}= –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FLOWER SHOP –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø   =${colors.reset}`);
  console.log(`${colors.bold}${colors.cyan}==========================================${colors.reset}`);
  console.log();
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –æ–±–∞.
 */
async function checkApiStatus(url) {
  console.log(`${colors.bold}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞${colors.reset}`);
  
  const urls = url ? [url] : [LOCAL_API_URL, PRODUCTION_API_URL];
  const results = {};
  
  for (const apiUrl of urls) {
    console.log(`${colors.blue}–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${apiUrl}${colors.reset}`);
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch(apiUrl, { 
        signal: controller.signal,
        method: 'GET',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      
      clearTimeout(timeoutId);
      
      console.log(`${colors.green}‚úì API —Å–µ—Ä–≤–µ—Ä ${apiUrl} –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${response.status}${colors.reset}`);
      
      let data = '';
      try {
        const text = await response.text();
        console.log(`${colors.blue}–û—Ç–≤–µ—Ç: ${text}${colors.reset}`);
        results[apiUrl] = { success: true, status: response.status, data: text };
      } catch (e) {
        console.log(`${colors.yellow}‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: ${e.message}${colors.reset}`);
        results[apiUrl] = { success: true, status: response.status, error: e.message };
      }
    } catch (error) {
      console.log(`${colors.red}‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ${apiUrl}: ${error.message}${colors.reset}`);
      
      if (error.name === 'AbortError') {
        console.log(`${colors.yellow}‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (5 —Å–µ–∫—É–Ω–¥)${colors.reset}`);
        results[apiUrl] = { success: false, error: 'timeout' };
      } else {
        if (error.code === 'ECONNREFUSED') {
          console.log(`${colors.red}  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
        } else if (error.message.includes('certificate')) {
          console.log(`${colors.red}  –ü—Ä–æ–±–ª–µ–º–∞ —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º${colors.reset}`);
        }
        
        results[apiUrl] = { success: false, error: error.message, code: error.code };
      }
    }
  }
  
  return {
    success: Object.values(results).some(r => r.success),
    results
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function checkDocker() {
  console.log(`${colors.bold}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker${colors.reset}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
    const dockerVersion = execSync('docker --version', { encoding: 'utf8' });
    console.log(`${colors.green}‚úì Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${dockerVersion.trim()}${colors.reset}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose
    try {
      const composeVersion = execSync('docker-compose --version', { encoding: 'utf8' });
      console.log(`${colors.green}‚úì Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${composeVersion.trim()}${colors.reset}`);
    } catch (error) {
      console.log(`${colors.yellow}‚ö† Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.reset}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è docker-compose.yml
    if (fs.existsSync(DOCKER_COMPOSE_PATH)) {
      console.log(`${colors.green}‚úì –§–∞–π–ª docker-compose.yml –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ docker-compose.yml
      const composeFile = fs.readFileSync(DOCKER_COMPOSE_PATH, 'utf8');
      
      if (composeFile.includes('flower-backend')) {
        console.log(`${colors.green}‚úì –°–µ—Ä–≤–∏—Å flower-backend –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ docker-compose.yml${colors.reset}`);
      } else {
        console.log(`${colors.yellow}‚ö† –°–µ—Ä–≤–∏—Å flower-backend –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ docker-compose.yml${colors.reset}`);
      }
    } else {
      console.log(`${colors.yellow}‚ö† –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.reset}`);
    }
    
    return { success: true };
  } catch (error) {
    console.log(`${colors.red}‚úó Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
function checkServerProject() {
  console.log(`${colors.bold}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞${colors.reset}`);
  
  if (fs.existsSync(SERVER_PROJECT_PATH)) {
    console.log(`${colors.green}‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: ${SERVER_PROJECT_PATH}${colors.reset}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
    const packageJsonPath = path.join(SERVER_PROJECT_PATH, 'package.json');
    if (fs.existsSync(packageJsonPath)) {
      console.log(`${colors.green}‚úì –§–∞–π–ª package.json –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      
      try {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
        if (packageJson.scripts && packageJson.scripts.start) {
          console.log(`${colors.green}‚úì –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: ${packageJson.scripts.start}${colors.reset}`);
        } else {
          console.log(`${colors.yellow}‚ö† –°–∫—Ä–∏–ø—Ç 'start' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ package.json${colors.reset}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if (packageJson.dependencies) {
          console.log(`${colors.green}‚úì –ù–∞–π–¥–µ–Ω–æ ${Object.keys(packageJson.dependencies).length} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π${colors.reset}`);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
          ['express', 'pg', 'dotenv'].forEach(dep => {
            if (packageJson.dependencies[dep]) {
              console.log(`${colors.green}  ‚úì ${dep}: ${packageJson.dependencies[dep]}${colors.reset}`);
            } else {
              console.log(`${colors.yellow}  ‚ö† ${dep} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö${colors.reset}`);
            }
          });
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules
        const nodeModulesPath = path.join(SERVER_PROJECT_PATH, 'node_modules');
        if (fs.existsSync(nodeModulesPath)) {
          console.log(`${colors.green}‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è node_modules –Ω–∞–π–¥–µ–Ω–∞${colors.reset}`);
        } else {
          console.log(`${colors.yellow}‚ö† –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å npm install${colors.reset}`);
        }
        
        return { success: true, packageJson };
      } catch (e) {
        console.log(`${colors.red}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json: ${e.message}${colors.reset}`);
        return { success: false, error: e.message };
      }
    } else {
      console.log(`${colors.red}‚úó –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.reset}`);
      return { success: false, error: 'package.json not found' };
    }
  } else {
    console.log(`${colors.red}‚úó –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${SERVER_PROJECT_PATH}${colors.reset}`);
    return { success: false, error: 'server directory not found' };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
 */
function checkEnvFiles() {
  console.log(`${colors.bold}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏${colors.reset}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  const clientEnvPath = path.join(CLIENT_PROJECT_PATH, '.env');
  if (fs.existsSync(clientEnvPath)) {
    console.log(`${colors.green}‚úì –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏${colors.reset}`);
    
    const clientEnv = fs.readFileSync(clientEnvPath, 'utf8');
    console.log(`${colors.blue}  –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (—Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏):${colors.reset}`);
    
    clientEnv.split('\n')
      .filter(line => line.trim() && !line.startsWith('#'))
      .forEach(line => {
        const key = line.split('=')[0];
        console.log(`${colors.blue}  - ${key}${colors.reset}`);
      });
  } else {
    console.log(`${colors.yellow}‚ö† –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏${colors.reset}`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
  const serverEnvPath = path.join(SERVER_PROJECT_PATH, '.env');
  if (fs.existsSync(serverEnvPath)) {
    console.log(`${colors.green}‚úì –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏${colors.reset}`);
    
    const serverEnv = fs.readFileSync(serverEnvPath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbHost = serverEnv.match(/DB_HOST=(.+)/);
    if (dbHost) {
      console.log(`${colors.blue}  - DB_HOST: ${dbHost[1]}${colors.reset}`);
    } else {
      console.log(`${colors.yellow}  ‚ö† DB_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Å–µ—Ä–≤–µ—Ä–∞${colors.reset}`);
    }
    
    const dbPort = serverEnv.match(/DB_PORT=(.+)/);
    if (dbPort) {
      console.log(`${colors.blue}  - DB_PORT: ${dbPort[1]}${colors.reset}`);
    }
    
    const dbName = serverEnv.match(/DB_NAME=(.+)/);
    if (dbName) {
      console.log(`${colors.blue}  - DB_NAME: ${dbName[1]}${colors.reset}`);
    }
  } else {
    console.log(`${colors.yellow}‚ö† –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏${colors.reset}`);
  }
  
  return { success: true };
}

/**
 * –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function startServer() {
  console.log(`${colors.bold}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞${colors.reset}`);
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–µ—Ä–≤–µ—Ä–∞
    process.chdir(SERVER_PROJECT_PATH);
    console.log(`${colors.blue}–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}${colors.reset}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
    if (!fs.existsSync('node_modules')) {
      console.log(`${colors.yellow}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${colors.reset}`);
      execSync('npm install', { stdio: 'inherit' });
    }
    
    console.log(`${colors.blue}–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ npm start...${colors.reset}`);
    console.log(`${colors.blue}–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ${colors.reset}`);
    console.log(`${colors.yellow}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è${colors.reset}`);
    console.log(`${colors.bold}${colors.cyan}==========================================${colors.reset}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    execSync('npm start', { stdio: 'inherit' });
    
    return { success: true };
  } catch (error) {
    console.log(`${colors.red}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}${colors.reset}`);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @param {string} url - URL API —Å–µ—Ä–≤–µ—Ä–∞
 * @param {object} credentials - –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function testAuth(url, credentials = { email: 'rast@inbox.ru', password: 'F123timer' }) {
  console.log(`${colors.bold}üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ ${url}${colors.reset}`);
  console.log(`${colors.blue}–ò—Å–ø–æ–ª—å–∑—É–µ–º email: ${credentials.email}${colors.reset}`);
  
  try {
    const response = await fetch(`${url}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache'
      },
      body: JSON.stringify(credentials)
    });
    
    console.log(`${colors.cyan}–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}${colors.reset}`);
    
    const data = await response.json();
    
    if (response.ok) {
      console.log(`${colors.green}‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞${colors.reset}`);
      console.log(`${colors.blue}–¢–æ–∫–µ–Ω: ${data.token ? data.token.substring(0, 15) + '...' : '–Ω–µ –ø–æ–ª—É—á–µ–Ω'}${colors.reset}`);
      
      if (data.user) {
        console.log(`${colors.blue}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name || data.user.email}${colors.reset}`);
        console.log(`${colors.blue}–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${data.user.is_admin ? '–î–∞' : '–ù–µ—Ç'}${colors.reset}`);
      } else {
        console.log(`${colors.yellow}‚ö† –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ${colors.reset}`);
      }
      
      return { success: true, data };
    } else {
      console.log(`${colors.red}‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}${colors.reset}`);
      return { success: false, error: data.message, status: response.status };
    }
  } catch (error) {
    console.log(`${colors.red}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}${colors.reset}`);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–æ–±–ª–µ–º
 */
function suggestSolutions(results) {
  console.log(`${colors.bold}${colors.magenta}==========================================${colors.reset}`);
  console.log(`${colors.bold}${colors.magenta}= –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò                =${colors.reset}`);
  console.log(`${colors.bold}${colors.magenta}==========================================${colors.reset}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è API
  const localApiSuccess = results.apiStatus?.results?.[LOCAL_API_URL]?.success;
  const productionApiSuccess = results.apiStatus?.results?.[PRODUCTION_API_URL]?.success;
  
  if (localApiSuccess && productionApiSuccess) {
    console.log(`${colors.green}‚úì –û–±–∞ API —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ${colors.reset}`);
  } else if (localApiSuccess) {
    console.log(`${colors.green}‚úì –õ–æ–∫–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç${colors.reset}`);
    console.log(`${colors.red}‚úó –ü—Ä–æ–¥–∞–∫—à–Ω API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
    
    console.log(`${colors.yellow}  –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞:${colors.reset}`);
    console.log(`${colors.yellow}  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTPS –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã${colors.reset}`);
    console.log(`${colors.yellow}  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞ ra.nov.ru${colors.reset}`);
  } else if (productionApiSuccess) {
    console.log(`${colors.red}‚úó –õ–æ–∫–∞–ª—å–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${colors.reset}`);
    console.log(`${colors.green}‚úì –ü—Ä–æ–¥–∞–∫—à–Ω API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç${colors.reset}`);
    
    if (results.serverProject && results.serverProject.success) {
      console.log(`${colors.yellow}  –†–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:${colors.reset}`);
      console.log(`${colors.blue}  cd ${SERVER_PROJECT_PATH} && npm start${colors.reset}`);
    }
  } else {
    console.log(`${colors.red}‚úó –û–±–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã${colors.reset}`);
    
    if (results.serverProject && results.serverProject.success) {
      console.log(`${colors.yellow}  –†–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:${colors.reset}`);
      console.log(`${colors.blue}  cd ${SERVER_PROJECT_PATH} && npm start${colors.reset}`);
    }
    
    if (results.docker && results.docker.success) {
      console.log(`${colors.yellow}  –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Docker:${colors.reset}`);
      console.log(`${colors.blue}  docker-compose up -d${colors.reset}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
  if (results.docker && !results.docker.success) {
    console.log(`${colors.yellow}‚ö† Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω${colors.reset}`);
    console.log(`${colors.yellow}  –†–µ—à–µ–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º–æ–π –∑–∞–ø—É—Å–∫${colors.reset}`);
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  console.log(`${colors.bold}${colors.cyan}==========================================${colors.reset}`);
  console.log(`${colors.blue}–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${colors.reset}`);
  console.log(`${colors.blue}node diagnostics.js --start-server${colors.reset}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å HTTPS
  if (!productionApiSuccess) {
    console.log(`${colors.cyan}–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å HTTPS:${colors.reset}`);
    console.log(`${colors.blue}1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ src/services/api.js –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HTTPS${colors.reset}`);
    console.log(`${colors.blue}2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤${colors.reset}`);
    console.log(`${colors.blue}3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ NGINX –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTTP –Ω–∞ HTTPS${colors.reset}`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
async function runDiagnostics() {
  printHeader();
  
  const results = {};
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
  try {
    console.log(`${colors.magenta}–ü—Ä–æ–≤–µ—Ä–∫–∞ API –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö${colors.reset}`);
    results.apiStatus = await checkApiStatus();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
    const localApiResult = results.apiStatus.results[LOCAL_API_URL];
    const productionApiResult = results.apiStatus.results[PRODUCTION_API_URL];
    
    console.log(`${colors.cyan}–ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:${colors.reset}`);
    console.log(`- –õ–æ–∫–∞–ª—å–Ω—ã–π API (${LOCAL_API_URL}): ${localApiResult?.success ? colors.green + '–î–æ—Å—Ç—É–ø–µ–Ω' : colors.red + '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}${colors.reset}`);
    console.log(`- –ü—Ä–æ–¥–∞–∫—à–Ω API (${PRODUCTION_API_URL}): ${productionApiResult?.success ? colors.green + '–î–æ—Å—Ç—É–ø–µ–Ω' : colors.red + '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}${colors.reset}`);
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API: ${error.message}${colors.reset}`);
    results.apiStatus = { success: false, error: error.message };
  }
  
  console.log(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
  results.docker = checkDocker();
  
  console.log(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  results.serverProject = checkServerProject();
  
  console.log(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
  results.envFiles = checkEnvFiles();
  
  console.log(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  
  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
  suggestSolutions(results);
  
  return results;
}

/**
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç
 */
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--start-server')) {
    await startServer();
  } else if (args.includes('--test-auth')) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const url = args.includes('--local') ? LOCAL_API_URL : 
                args.includes('--prod') ? PRODUCTION_API_URL : 
                LOCAL_API_URL;
    
    // –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const credentials = {
      email: args.find(arg => arg.startsWith('--email='))?.split('=')[1] || 'rast@inbox.ru',
      password: args.find(arg => arg.startsWith('--password='))?.split('=')[1] || 'F123timer'
    };
    
    await testAuth(url, credentials);
  } else {
    await runDiagnostics();
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(error => {
  console.error(`${colors.red}–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
  process.exit(1);
}); 