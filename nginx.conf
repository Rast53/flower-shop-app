events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Увеличиваем уровень логов для отладки
    error_log  /var/log/nginx/error.log  debug;
    access_log  /var/log/nginx/access.log  main;
    
    sendfile        on;
    keepalive_timeout  65;
    
    # Увеличиваем буферы проксирования
    proxy_buffers 16 32k;
    proxy_buffer_size 64k;
    proxy_busy_buffers_size 128k;
    proxy_connect_timeout 90;
    proxy_read_timeout 90;
    proxy_send_timeout 90;
    
    # Включаем DNS-кэширование и динамическое разрешение
    resolver 127.0.0.11 valid=30s ipv6=off;
    resolver_timeout 10s;

    # Добавляем статический файл для тестирования
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        
        root /usr/share/nginx/html;
        
        # Простая проверка здоровья
        location /health-check {
            add_header Content-Type text/plain;
            return 200 "Nginx is working!";
        }
        
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 80;
        server_name ra.nov.ru;
        
        # Редирект с HTTP на HTTPS
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name ra.nov.ru;
        
        # SSL сертификаты
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        
        # Настройки безопасности SSL
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        root /usr/share/nginx/html;
        index index.html;

        # Редирект со старого пути placeholder.jpg на новый
        location = /placeholder.jpg {
            # Вместо редиректа, напрямую отдаем изображение
            alias /usr/share/nginx/html/images/placeholder.jpg;
            add_header Cache-Control "public, max-age=31536000";
            add_header X-Image-Type "placeholder-direct";
            expires max;
            access_log off;
        }

        # Заглушка для отсутствующих изображений
        location = /images/placeholder.jpg {
            # Перенаправляем на статическое изображение-заглушку
            alias /usr/share/nginx/html/images/placeholder.jpg;
            add_header Cache-Control "public, max-age=31536000";
            add_header X-Image-Type "placeholder";
            expires max;
            access_log off;
        }
        
        # То же для пути /images/flower-placeholder.jpg
        location = /images/flower-placeholder.jpg {
            # Перенаправляем на статическое изображение-заглушку
            alias /usr/share/nginx/html/images/placeholder.jpg;
            add_header Cache-Control "public, max-age=31536000";
            add_header X-Image-Type "placeholder";
            expires max;
            access_log off;
        }

        # Отладочные endpoint'ы
        location /nginx-status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        location /debug/backend {
            add_header Content-Type text/plain;
            return 200 "Backend address: flower-backend:3000\nRemote Address: $remote_addr\nHost: $host\nRequest: $request\n";
        }

        location = /static-test {
            add_header Content-Type text/plain;
            return 200 "NGINX is working properly on HTTPS!";
        }

        # Проксирование запросов к Yandex Object Storage
        location ~* ^/s3-images/ {
            # Убираем префикс /s3-images/ из пути
            rewrite ^/s3-images/(.*) /$1 break;
            
            # Проксируем запрос к Yandex Object Storage
            proxy_pass https://storage.yandexcloud.net/flower-shop-images/;
            
            # Настройки проксирования
            proxy_http_version 1.1;
            proxy_set_header Host storage.yandexcloud.net;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Кеширование
            proxy_cache_valid 200 302 24h;
            proxy_cache_valid 404 1m;
            expires max;
            add_header Cache-Control "public, max-age=31536000";
            
            # Для безопасности
            proxy_intercept_errors on;
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            
            # CORS
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
            
            # Обрабатываем OPTIONS запросы
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Обработка статических файлов
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires max;
            access_log off;
            add_header Cache-Control "public, max-age=31536000";
        }

        # Проксирование запросов к API бэкенда
        location /api/ {
            # Используем переменную для разрешения DNS
            set $backend_server "flower-backend";
            
            # Используем переменную в proxy_pass
            proxy_pass http://$backend_server:3000;
            
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            
            # Добавляем больше заголовков для прокси
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Forwarded-Port 443;
            
            # Разрешаем заголовки CORS от бэкенда
            proxy_pass_header Access-Control-Allow-Origin;
            proxy_pass_header Access-Control-Allow-Methods;
            proxy_pass_header Access-Control-Allow-Headers;
            
            # Увеличиваем таймауты
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Обработка ошибок
            proxy_intercept_errors on;
            error_page 502 503 504 /api-error.html;
            
            # Разрешаем CORS
            add_header 'Access-Control-Allow-Origin' 'https://ra.nov.ru' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # Обрабатываем OPTIONS запросы
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Страница ошибки API
        location = /api-error.html {
            internal;
            add_header Content-Type application/json;
            return 503 '{"status":"error","message":"API service temporarily unavailable","code":503}';
        }

        # Telegram webhook endpoint
        location /telegram-webhook/ {
            set $telegram_server "telegram-bot";
            proxy_pass http://$telegram_server:3000/webhook/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Новый эндпоинт для тестирования Telegram webhook
        location /telegram-test {
            set $telegram_server "telegram-bot";
            proxy_pass http://$telegram_server:3000/telegram-test;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
        }

        # Добавим явный обработчик для health-check
        location = /api/health-check {
            proxy_pass http://flower-backend:3000/health-check;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Добавляем CORS заголовки
            add_header 'Access-Control-Allow-Origin' 'https://ra.nov.ru' always;
            add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS' always;
        }

        # Все остальные запросы направляем на index.html
        location / {
            try_files $uri $uri/ /index.html;
            
            # Разрешаем использовать в iframe из Telegram
            add_header Content-Security-Policy "frame-ancestors 'self' https://web.telegram.org https://*.telegram.org https://*.t.me";
            add_header Cross-Origin-Embedder-Policy "require-corp";
            add_header Cross-Origin-Opener-Policy "same-origin";
            add_header Cross-Origin-Resource-Policy "cross-origin";
        }

        # Настройки безопасности на уровне сервера
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "upgrade-insecure-requests";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
    }
}